{"version":3,"sources":["components/header/header.component.jsx","pages/Homepage/Homepage.js","pages/About_us/About_us.js","pages/Contac_us/Contact_us.js","pages/error.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","to","className","exact","activeClassName","Homepage","state","posts","fetch","then","response","json","setState","catch","error","console","log","this","class","map","post","index","key","title","rendered","featured_media","href","link","src","_embedded","source_url","dangerouslySetInnerHTML","__html","content","Component","About_us","Contact_us","ErrorPage","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mWAkBeA,EAdA,WACX,OACI,yBAAKC,GAAG,YACR,kBAAC,IAAD,CAAMC,GAAG,KACT,yBAAKC,UAAU,kBAAf,iBAEA,wBAAIA,UAAU,WACd,4BAAI,kBAAC,IAAD,CAASC,OAAK,EAACC,gBAAgB,aAAaH,GAAG,KAA/C,SACJ,4BAAI,kBAAC,IAAD,CAASG,gBAAgB,aAAaH,GAAG,aAAzC,aACJ,4BAAI,kBAAC,IAAD,CAASG,gBAAgB,aAAaH,GAAG,eAAzC,kBC8BGI,G,wBAtCX,aAAe,IAAD,8BACV,+CAEKC,MAAQ,CACXC,MAAO,IAJC,E,iFAQG,IAAD,OAChBC,MAAM,qEACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACF,GAAD,OAAW,EAAKK,SAAS,CAAEL,MAAMA,OACtCM,OAAM,SAACC,GACNC,QAAQD,MAAMA,MAEhBC,QAAQC,IAAIC,KAAKX,MAAMC,S,+BAGvB,OACI,yBAAKW,MAAM,aACV,yBAAKhB,UAAU,OAEhBe,KAAKX,MAAMC,MAAMY,KAAI,SAACC,EAAMC,GAAP,OACjB,yBAAKnB,UAAU,UACf,wBAAIoB,IAAKD,GAAQD,EAAKG,MAAMC,UAC3BJ,EAAKK,eACF,uBAAGC,KAAMN,EAAKO,MACd,yBAAKC,IAAKR,EAAKS,UAAU,oBAAoB,GAAGC,cAClD,KACF,yBAAK5B,UAAU,UAAU6B,wBAAyB,CAAEC,OAAQZ,EAAKa,QAAQT,sB,GA9B9DU,cCERC,EAJE,WACb,OAAO,uDCGIC,EAJI,WACf,OAAO,yDCGIC,EAJG,WACd,OAAO,0CC2BIC,E,iLAdX,OACA,yBAAKpC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACoC,KAAK,kBAAkBC,UAAWnC,IAC/C,kBAAC,IAAD,CAAOkC,KAAK,0BAA0BC,UAAWL,IACjD,kBAAC,IAAD,CAAOI,KAAK,4BAA4BC,UAAWJ,IACnD,kBAAC,IAAD,CAAOI,UAAWH,U,GAVNH,aCDEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,IAAD,KAAQ,kBAAC,EAAD,OAAkBC,SAASC,eAAe,SD0H5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.22f92c6a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './header.style.scss';\r\nimport{ NavLink, Link } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <nav id=\"main-nav\">\r\n        <Link to=\"/\">\r\n        <div className=\"logo-container\">THIS IS LOGO</div>\r\n        </Link>\r\n        <ul className=\"menu-ul\">\r\n        <li><NavLink exact activeClassName=\"nav-active\" to=\"/\" >Home</NavLink></li>\r\n        <li><NavLink activeClassName=\"nav-active\" to=\"/about-us\" >About Us</NavLink></li>\r\n        <li><NavLink activeClassName=\"nav-active\" to=\"/contact-us\">Contact Us</NavLink></li>\r\n        </ul>\r\n        </nav>\r\n    );\r\n}\r\nexport default Header;\r\n","import React, {Component} from 'react';\r\nimport './Homepage.style.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nclass Homepage extends Component {\r\n    constructor() {\r\n        super();\r\n    \r\n        this.state = {\r\n          posts: [],\r\n        };\r\n      }\r\n\r\ncomponentDidMount() {\r\n    fetch('https://bigbuildingdev.tk/wp-json/wp/v2/posts/?_embed&per_page=10')\r\n    .then(response => response.json())\r\n    .then((posts) => this.setState({ posts:posts,}))\r\n    .catch((error) => {\r\n      console.error(error);\r\n    })\r\n    console.log(this.state.posts);\r\n}\r\n  render() { \r\n    return (\r\n        <div class=\"container\">\r\n         <div className='row'>\r\n    {\r\n        this.state.posts.map((post, index) => (\r\n            <div className='col-sm'>\r\n            <h1 key={index}>{post.title.rendered}</h1>\r\n            {post.featured_media ?\r\n                <a href={post.link}>\r\n                <img src={post._embedded['wp:featuredmedia'][0].source_url} /></a>\r\n            : null}\r\n            <div className=\"content\" dangerouslySetInnerHTML={{ __html: post.content.rendered }} />\r\n            </div>\r\n        ))\r\n    }\r\n    </div>\r\n    </div>\r\n    )\r\n}\r\n}\r\nexport default Homepage;","import React from 'react';\r\n\r\nconst About_us = () => {\r\n    return <h1>This is About Us Page.</h1>\r\n}\r\n\r\nexport default About_us;","import React from 'react';\r\n\r\nconst Contact_us = () => {\r\n    return <h1>This is Contact Us Page.</h1>\r\n}\r\n\r\nexport default Contact_us;","import React from 'react';\r\n\r\nconst ErrorPage = () => {\r\n    return <h1>404 Error</h1>\r\n}\r\n\r\nexport default ErrorPage;","import React, {Component} from 'react';\nimport './App.css';\nimport {Route, Switch} from 'react-router-dom';\n\n//components\nimport Header from './components/header/header.component';\n\n//pages\nimport Homepage from './pages/Homepage/Homepage';\nimport About_us from './pages/About_us/About_us';\nimport Contact_us from './pages/Contac_us/Contact_us';\nimport ErrorPage from './pages/error';\n\nclass App extends Component {\n  \n  render() { \n    return (\n    <div className=\"App\">\n      <Header/>\n      <Switch>\n      <Route exact path=\"/wordpress-app/\" component={Homepage}/>\n      <Route path=\"/wordpress-app/about-us\" component={About_us}/>\n      <Route path=\"/wordpress-app/contact-us\" component={Contact_us}/>\n      <Route component={ErrorPage}/>\n      </Switch>\n    </div>\n    )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}